// コマンド一覧表

はじめに_で区切ってsetやaddならそっちへ。
relやfromParentやaimだったらそのように。
今気付いたけど文字列をそのままセットするコマンドが皆無・・だから
setで始まって文字列ならcolor, shape, action, moveにとばしちゃおうね。定数(ENEMYとか)はnumber, というか中身次第。
set_collisionFlag:ENEMY で若干長くなるけどまあいいや・・

speed
{speed:["set", 4]}  4にする
{speed:["add", 0.5]} 0.5たす
{speed:["set", 1, 60]} 60フレームかけて1にする
{speed:["add", 4, 60]} 60フレームかけて4たす

direction (mirrorは廃止)
{direction:["set", 90]} 90にする
{direction:["add", 15]} 15たす
{direction:["set", 90, 60]} 60フレームかけて90にする
{direction:["add", 15, 60]} 60フレームかけて15たす
{direction:["aim", 10]} 10のマージンで自機方向
{direction:["fromParent", 10]} 親から自分に向かう方向+10ディグリー

shotSpeed
{shotSpeed:["set", 4]} 4にする
{shotSpeed:["add", 1]} 1たす
{shotSpeed:["rel", 1]} 自身のspeed+1にする

shotDirection
{shotDirection:["set", 90]} 90にする
{shotDirection:["add", 10]} 10たす
{shotDirection:["aim", 10]} 10のマージンで自機方向
{shotDirection:["rel", 10]} 自身のdirection+10
{shotDirection:["fromParent", 180]} 親から自分に向かう方向+180ディグリー

shotDelay
{shotDelay:["set", 60]} 60にする
{shotDelay:["add", 10]} 10たす

shotDistance
{shotDistance:["set", 40]} 40にする
{shotDistance:["add", 60]} 60たす

shotAim
{shotAim:["set", 90]} 90にする
{shotAim:["add", 90]} 90たす

shotColor
{shotColor:"blue"} entity.drawColor["blue"]にする

shotShape
{shotShape:"wedgeSmall"} entity.drawShape["wedgeSmall"]にする

collisionFlag
{collisionFlag:ENEMY} ENEMYにする

shotCollisionFlag
{shotCollisionFlag:ENEMY_BULLET} ENEMY_BULLETにする
shotCollisionFlagは自動的に設定されないけどENEMY_BULLET→ENEMY_BULLET, PLAYER_BULLET→PLAYER_BULLETの
ルーチンは設定されてる

move, shotMove
{move:"go"}{shotMove:"go"} goにする、みたいな。
{move:"circular", bearing:1} これとかね。この場合、これそのまんまコンストラクタに放り込まれてクラスが生成される。

fire
{fire:""} もうこんだけね・・
たとえばだけど、{fire:true, count:5, interval:20}で20フレーム間隔で5発まで撃つとか、
(5発撃ったら自動的にfireをoffにする)
{fire:true, count:INF, interval:4}で4フレーム間隔で無限に撃ち続けるとか、{fire:false}でやめるとか
できたら面白そうね。1発だけ撃つ場合は{fire:true, count:1}みたいな。単に{fire:true}なら・・
{fire:true, count:5}ならintervalのデフォが1になる。で、5発撃つとおわり。
{fire:true}ならcount,intervalのデフォが1,0になる。従来のfireはこれ。
どうしよ・・迷うね・・・これだったらたとえばshotDistanceを徐々に変化っていうのも組み合わせれば記述が簡潔に・・？
撃つタイミングはactionのあと。だから、命令すればそのターンで発射できる。

だめだ。これだと一斉に発射できない。却下。（えー）

shotAction
{shotAction:["set", "name"]} dataから引っ張ってきてdata[name]を。

vanish
{vanish:true}で消えてくれる
フラグ系もセットでなんとかなるんだけどね。名前から直接操作したいからね。
vanishFlag→vanishに改名。

最終的には、s_"name":"value" ってあったらそのままnameをvalueにする、にしたい。し、
a_"name":"value" ってあったらそのままnameにvalueを足す、であってほしいよね。例外はあれど。

それ許しちゃうとactionとshapeとcolorがいっせいに反撃してくるから例外は認めるけどね。
