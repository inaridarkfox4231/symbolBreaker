位置ベースの移動
今、behaviorに
「this.position.add(this.velocity)」
使ってるけど、これを選択式にして、デフォはこれでいいとして、これとは別に、たとえば、
「
  this.position.x = this.move.r * cos(this.move.angle) + this.move.cx;
  this.position.y = this.move.r * sin(this.move.angle) + this.move.cy;
  this.move.angle += this.move.angleSpeed;
」(rを増やせば螺旋もらくらく)
みたいに、位置ベースで・・this.moveには動きを表現するパラメータが入る感じ。他にも、
「this.position.x += this.move.vx, this.move.vx += this.move.ax」
的な？そういうのを・・んー。
shotDirectionはこれとは別に。directionがないと表示の時に困るけどそれは適宜計算するのもあり・・とか？

class FireCommand{
  constructor(fireSeed, dict){
    if(fireSeed === undefined){ this.fire = createFirePattern({}); }
    else{
      const fireData = interpretNestedData(fireSeed, dict);
      this.fire = createFirePattern(fireData); // 変更
    }
  }
  execute(unit){
    this.fire(unit);
    unit.actionIndex++;
    return true;
  }
}

衝突判定の手順
colliderを各オブジェクトに用意する（この場合UnitとSelfUnitに必要）、Shapeから設定できそう。
colliderの衝突を判定する関数を用意する。quadTreeも用意する。
colliderの更新が出来るようにする。
colliderとは別にフラグを設けて事前に計算を回避できるようにする（ENEMY_BULLET同士は当たらないとか）。
メインループにquadTreeの更新やらいろいろ組み込んで・・あとはまあ、色々と。

未指定の場合、ノードユニットをDEFAULTにして、撃ちだすユニットはENEMYにする。
ENMEYだけ指定する場合、ENEMYで、撃ちだすユニットをENEMY_BULLETにする。
両方指定（たとえばENEMYがENEMYを作るとかDEFAULTがDEFAULTを作るとか・・）のときは両方参照する。
こういう場合は一番多い場合をデフォルトにするのが定石。でないといちいちめんどくさい。

画面外で消えるときはcollisionFlagをOFFにしよう。
パターンチェンジでunitを抹消するときもcollisionFlagをOFFにしよう。
NOTHINGやめてOFFにする。了解！

OFFにすれば余計なパーティクルが出現するのを防げる・・だいぶかけ離れたコードになってしまったが。
衝突判定、実装間近。なんとかしようね。
先にナイーブで実装して遊びたい・・・
今から作るやつ：
colliderの実装、更新処理追加、衝突判定の関数も作る。
playerのcolliderとunitの全colliderを持ち寄って、
枠内でvanishFlagがfalseでかつhideがfalseであったら木に放り込む、
ごっつんこしたところでフラグ処理でえり分け、ぶつかるようならcollider同士の判定関数でT/F.
Tならhitということでhitしたらどうするかの関数に処理を任せる。そういう流れ。
ナイーブならたとえばHPとダメージを適当に設定して総当たりでいける。
・・・総当たり？？たとえば600だとして600x599/2。。
これを減らすためにあれ、ENEMY_BULLETとPLAYER_BULLETを分けてたんよね・・でもなぁ、どうしようかな。
結局区別ないわけで、ね。まとめて扱った方が楽に決まってる。だからもうそこは突っ込まない方向で。
だってね、最終的にはそういう感じになるんよね。
ナイーブで総当たりするならそこらへん分ければ済む話だからそっちからやろうかね。んー・・乗り気しないが。

たとえば敵が10でこっちの弾丸が200の場合200x10になるし。敵の弾丸が400なら400x1.
たしても2400にしかならない、だから総当たりの方が圧倒的に速いかもしれないね。
ただこの場合、全部に対して例の円と円の距離判定をしないといけないからすごくめんどう・・。

あー、このvalidationのところでcollisionFlagを参照してえり分ける・・
bulletは当たった瞬間に消えるようにしたい。その分ダメージが入る的な？で、ゲージ表示して減る、的な？
PLAYERのHPは左上とかに出しといて・・ENEMYはすぐ下、ハナビィみたいに・・んー、考える。
受けた方はHPが減る。
PLAYERの場合にHPが0になったらどうのこうの追加せな・・
ENEMYの場合にデフォルトビヘイビアに「HPが0になったらvanish!」って追加・・
damageとhpができるわけね。
addActorsねぇ・addActorでいいんだけどね。addActorの際に、だからプレイヤーの移動範囲を若干狭めて、
当たり判定がはみ出さないようにする。で、playerにせよunitにせよcolliderのカバーレクトが画面内に
収まる場合だけaddActorする。たとえば画面外の敵には攻撃が当たらない。これは自然よね。画面内にいる時しか
当たらないわけ。そういう感じで。そういうのしか、入れない。で、colliderは毎回updateする。以上～。


やられたときにどかーん、のイメージ。
parentを使ってcircularを書き直しています。
parent使えばいいのではないかと。まず、衝突判定のタイミングをactionの直前にし、vanishFlagが立っているときは
actionを実行しないように仕様変更する。そのうえで、commandとして、parentにvanishFlagが立ったら位置をparentに
合わせてindexを増やして処理を抜けるっていうのを作る。こうすればやられた瞬間にセットした弾丸が発射される
(それまではhide:trueなどで隠しておく)。なお、その直後にparentはvanishして赤の他人になってしまうのでそこら辺は
注意しないといけないけどね。

shotDirectionの設定でfromParentを用意・・親の位置から自分の位置に向かうベクトルにいくつか足した値を
shotDirectionにしたいときに使う。

これからやること
behaviorにも省略記法を導入・・おいおいやる。commandのクラス化っていう重要な仕事があるので。
・colorとshapeをオブジェクト渡しにする。
名前になってるところ、colorとshapeでいいはずなのよ。だからそうする。seedに大きな変化はないかな。
Nameを外して指定しやすくなるし。目的は、shapeによってダメージを変えたい、ダメージの時にshapeを参照したいので、
そのために必要。つまりbullet固有のダメージという概念は存在しないということで。
HPについてはまあENEMY限定で存在するのだけど・・今考えてるのは、色と組み合わせてパターンを指定して、
たとえば正方形とか星とか他の図形でもいいけど。それによってHPが決まるようにすればコードが簡潔になるかなって。
いちいち指定するのめんどくさいんだよおぉぉぉぉぉぉぉぉぉぉ
もういっそダメージも色で指定するかな。

colorName→colorでオブジェクト化、shapeName→shapeでオブジェクト化、完了しました！(2020/01/11/05:00)
shapeはsetで初期設定をしないといけない・・自分で仕様作っておいてハマってしまった、やっぱ明文化すべきよね。

・collision関連。
今回colliderは、そのうちsegment作るけどとりあえずcircleだけ。shapeのsetメソッドで作る、というか、
初期化する感じ？うん。
segmentのイメージ・・laserにするかも。parentに向かって線を引く感じ。だからふたつ一組。薙ぎ払うのとかはまあ、そういうこと。
どこで引っかかってるかというと、colliderがずっと固定ならいいんだけど・・そうね・・判定するか。
shapeにどんなcolliderにするかの識別子を設ける。これは絶対に必要。当然、そうでないとcolliderを設定できない。
classにしておいてよかった。デフォルトの方にこのメソッドを作りましょうね。colliderType==="segment"とか"circle"とか。
そしてどんなアレを・・まあ、個別だけどね・・sizeどうするかって話でもあるし。
で、基本的には円。設定するときに、違うタイプのcolliderにするとき「だけ」、新しくnewコマンドで別のcolliderを
設定する、これはまれなこと。ほぼ全部円だから。それで行ける・・？unitのinitializeにも書いておこう。

colliderのupdateはもちろんupdateの中のbehaviorの直後。
rが増大していくイメージとかでしょ・・んー、おすすめしないけどできるっちゃできるよね。？
shapeが変わっちゃうか・・それはまずいよね・・shape, 共通のもの使ってるから、まあいいや、それはおいおい。

帰ったらshapeのsetメソッドでcolliderのsettingのところ（主にrをどうするか）記述しようね。これからです。これから。


signalっていうコマンド考えたよ。たとえば{signal:"vanish"}ってやるとね、parentがvanishFlag立ったときに
カウント一つ増やして抜けない。立ってないなら何もしないで抜ける。バリエーションとしては、signal:"ここにmode", なんか
オプション。たとえば自機に近付いたら次とか、そういうの。動きに関してはbehaviorに任せるか動きを指定しておいて
ストップかける感じですかね・・signal, 赤信号→青信号のイメージ。
考えた。lifeがmaxLifeの8割以下とか5割以下とかそういうの！そうすればいいんじゃん。なるー。

今考えてるのはあるユニットの周りに4つくらい回ってて中心が消えるまでくるくるして消えたら4つの方向にばーん！
入れる順番も中心が先だからupdateの順番もその順になるしいけるんじゃない。

あー、あとね。重なると見えないから中身空にしてstrokeWeightでやりたいなって思って。や、strokeWeightは3くらいで固定して
noFill()で描きたい感じ。あと、敵表示のユニットは回転し続ける、bullet用のユニットは方向にぎゅーんって住み分けしたいね。
敵表示ユニット：回転正方形、回転星型、回転正三角形とか正五角形とか六芒星とかetc...
bullet用ユニット：wedge, rect, dia, orientedStar, などなど。レーザー作りたいなぁ。
レーザーはスリップダメージにするとか。寿命作れば問題ないでしょ。

とりあえずー、まず現時点ではENEMY_BULLETとPLAYER, ENEMYとPLAYER_BULLETだけで取ります。
で、BULLETの方はhitしたら消える。つまり、vanishFlagが立つ。PLAYERとENEMYはHPやDAMAGEがあれで、0になったら
VANISHフラグ立つよと。で、vanishFlagが立っている場合は判定をしない（すり抜けるなど）。うん。
unitにもHP用意しないと・・デフォルトは0で、まあ弾丸にも設定されるけどhitであれ、あれだから。
hitには相手のユニットを渡す。ENEMY_BULLETだったら相手の情報は使わないけどね。ENEMYだったら相手はPLAYER_BULLETだから、
その色とか形から計算したダメージが入る感じ。一定量で消える。
maxHitPointとhitPointですね。それをね。damageは、作らない。作ってもいいのかも？作るか。そのーが・・
渡すのもダメージ量にすれば処理が簡潔になるな・・そうするかー。playerはdamage=0とか。

あるいはー、bulletにもhitPoint用意して適切に減らしてある程度減ったら消えるとか？（想像しづらいが・・）だってスリップでしょ？

bindはBehaviorじゃない方がいい。プロパティにして、actionの中で、bind===trueでparentが
vanishのときは自分をvanishさせて消える、ってやるべき。

TODO:
itemどうするか、現時点でのアイデアをまとめておく。collisionFlag:item は playerとのみ衝突するunit.
playerへの作用とか、動き方は指定するとして・・うーん。難しいな。behaviorとして定義するなら、
自分を登録するときのキー、それにより時間経過で外す処理などが必要でしょうね。
たとえば攻撃力アップやHPの自動回復なんかが考えられるかな。

自身のdirectionをaimにするため{direction:["aim", 10]}みたいな処理ができるようにした。

<<<<<-----重要！----->>>>>
ノードユニットが敵を出すステージ構成のような場合、最後のボスを出したらvanishさせてしまえば、
unitArrayが空になることでもってステージクリアとすることができる。

今考えてるのは曲に合わせて敵の攻撃がリズミカルに発射されたら面白いなって。
あときつねさんの曲がなんか合いそう（昔のとか）

当たると大ダメージを受けるbulletをつなげておくことで即死トラップができそうね。
画面外（上とか下とか）にbulletをずらりと並べておいてボスがやられた直後にaim0なりまっすぐなりでぎゅーんと進んでくるとか
互い違いでがしゃーんとか面白そう。横でもいい。何考えてるの・・ステージどうしようかなって。
あれはいい加減が過ぎるから・・
